package file

import "sort"

// Sort by name first then with special order.
// Special order should be generated by the order package.
//
// This is based on how gitignore.io sorts the result:
// https://github.com/toptal/gitignore.io/blob/83dbcff2f7e3e084807ab64f7b545d256df7ca64/Sources/App/RouteHandlers/APIRouteHandlers.swift#L131-L132
func Sort(items []string, specialOrder map[string]int) []string {
	by(byCanon).Sort(items)
	by(bySpecial(specialOrder)).Sort(items)
	return items
}

type by func(a, b string) bool

func (by by) Sort(items []string) {
	s := sorter{
		items: items,
		by:    by,
	}
	sort.Sort(&s)
}

type sorter struct {
	items []string
	by    by
}

func (s *sorter) Len() int {
	return len(s.items)
}

func (s *sorter) Swap(i, j int) {
	s.items[i], s.items[j] = s.items[j], s.items[i]
}

func (s *sorter) Less(i, j int) bool {
	return s.by(s.items[i], s.items[j])
}

func byCanon(a, b string) bool {
	return Canon(a) < Canon(b)
}

func bySpecial(specialOrder map[string]int) func(a, b string) bool {
	return func(a, b string) bool {
		return specialOrder[Canon(a)] < specialOrder[Canon(b)]
	}
}
